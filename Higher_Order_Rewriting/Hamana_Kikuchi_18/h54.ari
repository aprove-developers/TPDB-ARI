(format higher-order)
(sort list)
(sort nat)
(fun O nat)
(fun cons (-> nat list list))
(fun foldl (-> (-> nat nat nat) nat list nat))
(fun nil list)
(fun plusc (-> nat nat nat))
(fun s (-> nat nat))
(fun sum (-> list nat))
(fun xap (-> (-> nat nat nat) nat nat nat))
(fun yap (-> (-> nat nat) nat nat))
(rule (foldl (lambda ((%X nat) (%Y nat)) (yap (xap F %X) %Y)) Y nil) Y)
(rule (foldl (lambda ((%Z nat) (%U nat)) (yap (xap G %Z) %U)) V (cons W P)) (foldl (lambda ((%V nat) (%W nat)) (yap (xap G %V) %W)) (yap (xap G V) W) P))
(rule (plusc X1 O) X1)
(rule (plusc Y1 (s U1)) (s (plusc Y1 U1)))
(rule (sum V1) (foldl (lambda ((%F nat) (%G nat)) (yap (xap plusc %F) %G)) O V1))
(rule (xap I1 P1) (I1 P1))
(rule (yap F2 Y2) (F2 Y2))
