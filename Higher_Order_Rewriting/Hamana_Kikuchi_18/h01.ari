(format higher-order)
(sort a)
(sort b)
(sort c)
(fun O c)
(fun add (-> a c c))
(fun cons (-> a b b))
(fun fold (-> (-> a c c) c b c))
(fun mul (-> a c c))
(fun nil b)
(fun plus (-> c c c))
(fun prod (-> b c))
(fun s (-> c c))
(fun sum (-> b c))
(fun times (-> c c c))
(fun xap (-> (-> a c c) a c c))
(fun yap (-> (-> c c) c c))
(rule (fold (lambda ((%X a) (%Y c)) (yap (xap F %X) %Y)) Y nil) Y)
(rule (fold (lambda ((%Z a) (%U c)) (yap (xap G %Z) %U)) V (cons W P)) (yap (xap G W) (fold (lambda ((%V a) (%W c)) (yap (xap G %V) %W)) V P)))
(rule (plus O X1) X1)
(rule (plus (s Y1) U1) (s (plus Y1 U1)))
(rule (times O V1) O)
(rule (times (s W1) P1) (plus (times W1 P1) P1))
(rule sum (fold (lambda ((%F a) (%G c)) (yap (xap add %F) %G)) O))
(rule prod (fold (lambda ((%H a) (%I c)) (yap (xap mul %H) %I)) (s O)))
(rule (xap F2 Y2) (F2 Y2))
(rule (yap G2 V2) (G2 V2))
