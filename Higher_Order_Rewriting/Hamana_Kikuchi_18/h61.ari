(format higher-order)
(sort list)
(sort nat)
(fun app (-> list list list))
(fun cons (-> nat list list))
(fun foldl (-> (-> list nat list) list list list))
(fun iconsc (-> list nat list))
(fun nil list)
(fun reverse (-> list list))
(fun reverse1 (-> list list))
(rule (app nil X) X)
(rule (app (cons Y U) V) (cons Y (app U V)))
(rule (foldl I P nil) P)
(rule (foldl F1 Y1 (cons U1 V1)) (foldl F1 (F1 Y1 U1) V1))
(rule (iconsc W1 P1) (cons P1 W1))
(rule (reverse X2) (foldl (lambda ((%G list) (%F nat)) (iconsc %G %F)) nil X2))
(rule (reverse1 Y2) (foldl (lambda ((%H list) (%I nat)) (app (cons %I nil) %H)) nil Y2))
