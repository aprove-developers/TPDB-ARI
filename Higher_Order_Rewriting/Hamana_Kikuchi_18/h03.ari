(format higher-order)
(sort a)
(sort b)
(sort c)
(fun add (-> c a c))
(fun cons (-> a b b))
(fun fold (-> (-> c a c) b c c))
(fun mul (-> c a c))
(fun nil b)
(fun one c)
(fun prod (-> b c))
(fun sum (-> b c))
(fun xap (-> (-> c a c) c a c))
(fun yap (-> (-> a c) a c))
(fun zero c)
(rule (fold (lambda ((x c) (y a)) (yap (xap F x) y)) nil Y) Y)
(rule (fold (lambda ((x c) (y a)) (yap (xap G x) y)) (cons V W) P) (fold (lambda ((x c) (y a)) (yap (xap G x) y)) W (yap (xap G P) V)))
(rule (sum X) (fold (lambda ((x c) (y a)) (yap (xap add x) y)) X zero))
(rule (fold mul Y one) (prod Y))
(rule (xap G V) (G V))
(rule (yap I P) (I P))
