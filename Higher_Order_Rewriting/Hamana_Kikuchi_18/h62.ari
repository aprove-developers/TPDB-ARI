(format higher-order)
(sort list)
(sort nat)
(fun app (-> list list list))
(fun cons (-> nat list list))
(fun foldl (-> (-> list nat list) list list list))
(fun iconsc (-> list nat list))
(fun nil list)
(fun reverse (-> list list))
(fun reverse1 (-> list list))
(fun xap (-> (-> list nat list) list nat list))
(fun yap (-> (-> nat list) nat list))
(rule (app nil X) X)
(rule (app (cons Y U) V) (cons Y (app U V)))
(rule (foldl (lambda ((%X list) (%Y nat)) (yap (xap I %X) %Y)) P nil) P)
(rule (foldl (lambda ((%Z list) (%U nat)) (yap (xap F1 %Z) %U)) Y1 (cons U1 V1)) (foldl (lambda ((%V list) (%W nat)) (yap (xap F1 %V) %W)) (yap (xap F1 Y1) U1) V1))
(rule (iconsc W1 P1) (cons P1 W1))
(rule (reverse X2) (foldl (lambda ((%F list) (%G nat)) (yap (xap iconsc %F) %G)) nil X2))
(rule (reverse1 Y2) (foldl (lambda ((%I list) (%H nat)) (app (cons %H nil) %I)) nil Y2))
(rule (xap G2 V2) (G2 V2))
(rule (yap I2 P2) (I2 P2))
