(format higher-order)
(sort nat)
(sort natlist)
(fun O nat)
(fun cons (-> nat natlist natlist))
(fun foldl (-> (-> nat nat nat) nat natlist nat))
(fun nil natlist)
(fun plus (-> nat nat nat))
(fun sum (-> natlist nat))
(fun xap (-> (-> nat nat nat) nat nat nat))
(fun yap (-> (-> nat nat) nat nat))
(rule (foldl (lambda ((%X nat) (%Y nat)) (yap (xap F %X) %Y)) Y nil) Y)
(rule (foldl (lambda ((%Z nat) (%U nat)) (yap (xap G %Z) %U)) V (cons W P)) (foldl (lambda ((%V nat) (%W nat)) (yap (xap G %V) %W)) (yap (xap G V) W) P))
(rule (sum X1) (foldl (lambda ((%F nat) (%G nat)) (yap (xap plus %F) %G)) O X1))
(rule (xap Z1 U1) (Z1 U1))
(rule (yap H1 W1) (H1 W1))
