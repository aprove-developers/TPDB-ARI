(format higher-order)
(sort nat)
(sort natlist)
(sort pair)
(sort plist)
(fun O nat)
(fun app (-> natlist natlist natlist))
(fun apply2 (-> (-> pair nat pair) pair nat pair))
(fun cons (-> nat natlist natlist))
(fun fst (-> pair natlist))
(fun nil natlist)
(fun p (-> natlist natlist pair))
(fun pcons (-> pair plist plist))
(fun pnil plist)
(fun pps (-> natlist plist))
(fun prefixshuffle (-> pair natlist plist))
(fun pshuffle (-> natlist pair))
(fun reverse (-> natlist natlist))
(fun s (-> nat nat))
(fun shuffle (-> natlist natlist))
(rule (app nil l) l)
(rule (app (cons n l) y) (cons n (app l y)))
(rule (reverse nil) nil)
(rule (reverse (cons n l)) (app (reverse l) (cons n nil)))
(rule (shuffle nil) nil)
(rule (shuffle (cons n l)) (cons n (shuffle (reverse l))))
(rule (fst (p x y)) x)
(rule (pshuffle l) (p l (shuffle l)))
(rule (prefixshuffle z nil) (pcons z pnil))
(rule (prefixshuffle z (cons n l)) (pcons z (prefixshuffle (apply2 (lambda ((x pair) (y nat)) (pshuffle (app (fst x) (cons y nil)))) z n) (reverse l))))
(rule (apply2 F z O) z)
(rule (apply2 F z (s n)) (F z (s n)))
(rule (pps l) (prefixshuffle (p nil nil) l))
