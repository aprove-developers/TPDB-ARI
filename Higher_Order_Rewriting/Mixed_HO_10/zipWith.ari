(format higher-order)
(sort bool)
(sort list)
(sort nat)
(fun O nat)
(fun cons (-> nat list list))
(fun false bool)
(fun gcd (-> nat nat nat))
(fun gcdlists (-> list list list))
(fun if (-> bool nat nat nat))
(fun le (-> nat nat bool))
(fun minus (-> nat nat nat))
(fun nil list)
(fun s (-> nat nat))
(fun true bool)
(fun zipWith (-> (-> nat nat nat) list list list))
(rule (le O y) true)
(rule (le (s x) O) false)
(rule (le (s x) (s y)) (le x y))
(rule (minus x O) x)
(rule (minus (s x) (s y)) (minus x y))
(rule (gcd O y) O)
(rule (gcd (s x) O) O)
(rule (gcd (s x) (s y)) (if (le y x) (s x) (s y)))
(rule (if true (s x) (s y)) (gcd (minus x y) (s y)))
(rule (if false (s x) (s y)) (gcd (minus y x) (s x)))
(rule (zipWith f xs nil) nil)
(rule (zipWith f nil ys) nil)
(rule (zipWith f (cons x xs) (cons y ys)) (cons (f x y) (zipWith f xs ys)))
(rule (gcdlists xs ys) (zipWith (lambda ((x nat) (y nat)) (gcd x y)) xs ys))
