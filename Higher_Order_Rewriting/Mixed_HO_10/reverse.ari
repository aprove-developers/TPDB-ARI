(format higher-order)
(sort list)
(sort nat)
(fun app (-> list list list))
(fun cons (-> nat list list))
(fun foldl (-> (-> list nat list) list list list))
(fun iconsc (-> list nat list))
(fun nil list)
(fun reverse (-> list list))
(fun reverse1 (-> list list))
(rule (app nil xs) xs)
(rule (app (cons x xs) ys) (cons x (app xs ys)))
(rule (foldl F xs nil) xs)
(rule (foldl F xs (cons y ys)) (foldl F (F xs y) ys))
(rule iconsc (lambda ((xs list) (x nat)) (cons x xs)))
(rule (reverse xs) (foldl iconsc nil xs))
(rule (reverse1 xs) (foldl (lambda ((lx list) (x nat)) (app (cons x nil) lx)) nil xs))
